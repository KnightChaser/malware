import socket
import ssl
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

# AES 키와 IV 생성
AES_KEY = os.urandom(32)
IV = os.urandom(16)

def encrypt_message(message: str) -> bytes:
    cipher = Cipher(algorithms.AES(AES_KEY), modes.CFB(IV), backend=default_backend())
    encryptor = cipher.encryptor()
    return encryptor.update(message.encode()) + encryptor.finalize()

# 서버 설정
server_hostname = 'localhost'
server_port = 8443

context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
context.check_hostname = False
context.load_verify_locations(r"C:\\Users\\rkwls\\certs\\cert.pem")

client_socket = socket.create_connection((server_hostname, server_port))
ssl_client_socket = context.wrap_socket(client_socket, server_hostname=server_hostname)

# AES 키와 IV 전송
ssl_client_socket.sendall(AES_KEY)
ssl_client_socket.sendall(IV)

# 암호화된 메시지 전송
message = "Hello, Server!"
encrypted_message = encrypt_message(message)
ssl_client_socket.sendall(encrypted_message)

# 암호화된 응답 수신 및 복호화
encrypted_response = ssl_client_socket.recv(1024)
cipher = Cipher(algorithms.AES(AES_KEY), modes.CFB(IV), backend=default_backend())
decryptor = cipher.decryptor()
response = (decryptor.update(encrypted_response) + decryptor.finalize()).decode()
print("서버에서 받은 응답:", response)

ssl_client_socket.close()
