import socket
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

server_hostname = '172.25.80.140'
server_port = 12345

try:
    client_socket = socket.create_connection((server_hostname, server_port))

    # 서버로부터 RSA 공개키 수신
    public_key_data = client_socket.recv(450)
    server_public_key = RSA.import_key(public_key_data)

    # AES 대칭키 생성 및 RSA 암호화 후 전송
    aes_key = get_random_bytes(32)
    cipher_rsa = PKCS1_OAEP.new(server_public_key)
    encrypted_aes_key = cipher_rsa.encrypt(aes_key)
    client_socket.sendall(encrypted_aes_key)

    def encrypt_message(message: str) -> bytes:
        iv = get_random_bytes(16)
        cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
        encryptor = cipher.encryptor()
        return iv + encryptor.update(message.encode()) + encryptor.finalize()

    def decrypt_message(encrypted_message: bytes) -> str:
        iv = encrypted_message[:16]
        cipher = Cipher(algorithms.AES(aes_key), modes.CFB(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        decrypted_data = decryptor.update(encrypted_message[16:]) + decryptor.finalize()
        return decrypted_data.decode('utf-8')

    while True:
        message = input("Enter message to send to server: ")
        encrypted_message = encrypt_message(message)
        client_socket.sendall(encrypted_message)

        response_data = client_socket.recv(1024)
        if len(response_data) < 16:
            print("Invalid encrypted response.")
        else:
            response = decrypt_message(response_data)
            print("Response from server:", response)

except Exception as e:
    print(f"Connection error: {e}")
finally:
    client_socket.close()
