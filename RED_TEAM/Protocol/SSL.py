from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os

# AES 암호화를 위한 대칭 키와 IV 생성
AES_KEY = os.urandom(32)  # 256-bit 암호화 키를 무작위로 생성
IV = os.urandom(16)       # 128-bit 초기화 벡터(IV)를 무작위로 생성

def encrypt_message(message: str) -> bytes:
    """
    문자열 메시지를 AES 알고리즘을 사용해 암호화하는 함수입니다.
    CFB(Cipher Feedback) 모드를 사용하며, IV를 암호화된 메시지에 포함하여 반환합니다.
    
    :param message: 암호화할 문자열 메시지
    :return: IV가 포함된 암호화된 메시지 (bytes)
    """
    # AES 암호화 설정 (대칭키 암호화 알고리즘, CFB 모드 사용)
    cipher = Cipher(algorithms.AES(AES_KEY), modes.CFB(IV), backend=default_backend())
    encryptor = cipher.encryptor()  # 암호화기 객체 생성
    # IV와 암호화된 메시지를 합쳐 반환
    return IV + encryptor.update(message.encode()) + encryptor.finalize()

def decrypt_message(encrypted_message: bytes) -> str:
    """
    암호화된 메시지를 복호화하여 원래 문자열로 복원하는 함수입니다.
    메시지의 처음 16바이트는 IV이며, 이를 사용하여 복호화를 수행합니다.
    
    :param encrypted_message: 복호화할 암호화된 메시지 (bytes)
    :return: 복호화된 원래 문자열 메시지
    """
    iv = encrypted_message[:16]  # 암호화된 메시지에서 IV 추출
    # AES 복호화 설정 (대칭키 암호화 알고리즘, CFB 모드 사용)
    cipher = Cipher(algorithms.AES(AES_KEY), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()  # 복호화기 객체 생성
    # IV 이후의 암호화된 메시지를 복호화하여 원래 문자열로 반환
    return (decryptor.update(encrypted_message[16:]) + decryptor.finalize()).decode()
