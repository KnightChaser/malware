import socket
import ssl

# 서버 설정
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # IPv4, TCP 소켓 생성
server_socket.bind(('localhost', 8443))  # 로컬호스트에서 포트 8443으로 바인딩
server_socket.listen(5)  # 최대 5개의 클라이언트 연결 대기

# SSL 컨텍스트 설정 (TLS 서버용)
context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)  # TLS 서버 프로토콜 설정
context.load_cert_chain(certfile="path/to/certificate.pem", keyfile="path/to/private_key.pem")  # 인증서 및 개인 키 파일 로드

print("SSL 서버가 실행 중입니다...")

while True:
    # 클라이언트 연결 수락
    client_socket, addr = server_socket.accept()  # 클라이언트 연결 대기
    ssl_client_socket = context.wrap_socket(client_socket, server_side=True)  # SSL로 소켓 감싸기
    print(f"클라이언트 연결됨: {addr}")

    # 암호화된 데이터 수신
    encrypted_data = ssl_client_socket.recv(1024)  # 클라이언트로부터 최대 1024바이트의 암호화된 데이터 수신
    data = decrypt_message(encrypted_data)  # 수신한 암호화된 데이터를 복호화
    print("받은 데이터:", data)

    # 클라이언트로 암호화된 응답 전송
    response = "서버에서 응답합니다."  # 응답 메시지 정의
    encrypted_response = encrypt_message(response)  # 응답 메시지 암호화
    ssl_client_socket.sendall(encrypted_response)  # 암호화된 응답을 클라이언트에 전송

    # 연결 종료
    ssl_client_socket.close()  # SSL 연결 닫기
