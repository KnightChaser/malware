import socket
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from protocol_message import ProtocolMessage

'''
서버는 RSA 공개키를 통해 AES 키를 안전하게 교환하고,
이후 클라이언트가 전송한 다양한 데이터를 복호화하여 텍스트로 출력하거나 파일로 저장
'''

# RSA 키 쌍 생성 (서버에서 AES 키 암호화/복호화를 위해 사용)
rsa_key = RSA.generate(2048)
private_key = rsa_key          # 서버의 비공개키
public_key = rsa_key.publickey()  # 서버의 공개키 (클라이언트에 전송)

def start_server(host='localhost', port=12345):
    # 서버 소켓 생성 및 연결 설정
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print(f"Server listening on {host}:{port}")

    while True:
        # 클라이언트 연결 수락
        conn, addr = server_socket.accept()
        print(f"Connected by {addr}")

        # 클라이언트에 RSA 공개키 전송
        conn.send(public_key.export_key())

        # 클라이언트로부터 암호화된 AES 키 수신 및 복호화
        encrypted_aes_key = conn.recv(256)
        cipher_rsa = PKCS1_OAEP.new(private_key)
        aes_key = cipher_rsa.decrypt(encrypted_aes_key)

        # ProtocolMessage 객체에서 사용할 AES 키 설정
        ProtocolMessage.set_shared_key(aes_key)

        # 클라이언트로부터 데이터 수신 및 복호화하여 처리
        data = conn.recv(8192)
        if data:
            deserialized_message = ProtocolMessage.deserialize(data)

            # 요청 유형에 따라 데이터를 처리
            if deserialized_message.request_type == "TEXT":
                print("Received text:", deserialized_message.payload.decode('utf-8'))
            elif deserialized_message.request_type in ["EXECUTABLE", "IMAGE", "VIDEO"]:
                # 파일 데이터를 저장
                with open("received_file", "wb") as f:
                    f.write(deserialized_message.payload)
                print("File saved as received_file")

        # 연결 종료
        conn.close()

start_server()
