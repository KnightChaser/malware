import socket
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from ProtocolMessage import ProtocolMessage

'''
클라이언트는 서버로부터 받은 RSA 공개키로 AES 키를 암호화하여 전송하고,
이후 텍스트 또는 파일 데이터를 AES로 암호화하여 서버에 전송
'''

def send_data_to_server(file_path=None, text=None, request_type="TEXT", host='localhost', port=12345):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
        client_socket.connect((host, port))

        # 서버로부터 RSA 공개키 수신
        public_key_data = client_socket.recv(450)
        server_public_key = RSA.import_key(public_key_data)

        # AES 대칭키 생성 및 RSA 암호화 후 전송
        aes_key = get_random_bytes(32)
        cipher_rsa = PKCS1_OAEP.new(server_public_key)
        encrypted_aes_key = cipher_rsa.encrypt(aes_key)
        client_socket.sendall(encrypted_aes_key)

        # ProtocolMessage 객체에서 암호화에 사용할 AES 키 설정
        ProtocolMessage.set_shared_key(aes_key)

        # 전송할 데이터 설정
        session_id = 12345
        data_type = "TEXT" if request_type == "TEXT" else "BINARY"

        if file_path:
            # 파일 데이터를 읽어 payload로 설정
            with open(file_path, "rb") as f:
                payload = f.read()
        else:
            # 텍스트 데이터를 payload로 설정
            payload = text.encode('utf-8')

        # ProtocolMessage 생성 및 직렬화
        message = ProtocolMessage(session_id, request_type, data_type, payload)
        serialized_message = message.serialize()

        # 서버로 메시지 전송
        client_socket.sendall(serialized_message)
        print("Data sent to server.")

# 사용 예시
# 텍스트 전송
send_data_to_server(text="Hello, this is a test message")

# 파일 전송 (경로를 지정해 사용)
# send_data_to_server(file_path="path/to/your/file", request_type="EXECUTABLE")
